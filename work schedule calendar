import tkinter as tk
from tkinter import ttk, messagebox, simpledialog
from tkcalendar import Calendar
import sqlite3
from datetime import datetime, timedelta

class WorkScheduleApp:
    def __init__(self, master):
        self.master = master
        self.master.title("Work Schedule Manager")
        self.master.geometry("400x700")

        self.style = ttk.Style()
        self.style.theme_use('clam')  # Change theme for a modern look

        self.conn = sqlite3.connect("work_schedule.db")
        self.create_table()
        self.load_config()
        self.create_widgets()

    def create_table(self):
        cursor = self.conn.cursor()
        cursor.execute('''CREATE TABLE IF NOT EXISTS configuration
                          (start_time TEXT, end_time TEXT)''')
        cursor.execute('''CREATE TABLE IF NOT EXISTS rates
                          (normal_rate REAL, overtime_rate REAL)''')
        cursor.execute('''CREATE TABLE IF NOT EXISTS overtime_hours
                          (date TEXT PRIMARY KEY, hours REAL)''')
        self.conn.commit()

    def load_config(self):
        cursor = self.conn.cursor()
        cursor.execute("SELECT * FROM configuration")
        config = cursor.fetchone()
        cursor.execute("SELECT * FROM rates")
        rates = cursor.fetchone()

        if not config or not rates:
            self.initial_setup()
        else:
            self.start_time, self.end_time = config
            self.normal_rate, self.overtime_rate = rates

    def initial_setup(self):
        start_time = simpledialog.askstring("Initial Setup", "Work schedule start time (HH:MM):")
        end_time = simpledialog.askstring("Initial Setup", "Work schedule end time (HH:MM):")
        normal_rate = simpledialog.askfloat("Initial Setup", "Normal hourly rate:")
        overtime_rate = simpledialog.askfloat("Initial Setup", "Overtime hourly rate:")

        if all([start_time, end_time, normal_rate is not None, overtime_rate is not None]):
            cursor = self.conn.cursor()
            cursor.execute("INSERT OR REPLACE INTO configuration VALUES (?, ?)", (start_time, end_time))
            cursor.execute("INSERT OR REPLACE INTO rates VALUES (?, ?)", (normal_rate, overtime_rate))
            self.conn.commit()
            self.start_time, self.end_time = start_time, end_time
            self.normal_rate, self.overtime_rate = normal_rate, overtime_rate
        else:
            messagebox.showerror("Error", "All fields are required. Please restart the application.")
            self.master.quit()

    def create_widgets(self):
        self.notebook = ttk.Notebook(self.master)
        self.notebook.pack(expand=1, fill="both")

        # Calendar Tab
        self.calendar_frame = ttk.Frame(self.notebook)
        self.notebook.add(self.calendar_frame, text="Calendar")

        self.cal = Calendar(self.calendar_frame, selectmode='day', date_pattern='yyyy-mm-dd')
        self.cal.grid(row=0, column=0, columnspan=2, pady=10, padx=10)

        # Buttons organized in a grid
        ttk.Button(self.calendar_frame, text="View day details", command=self.show_day_details).grid(row=1, column=0, pady=5)
        ttk.Button(self.calendar_frame, text="Add overtime hours", command=self.add_extra_hours).grid(row=1, column=1, pady=5)
        ttk.Button(self.calendar_frame, text="View daily earnings", command=self.show_daily_earnings).grid(row=2, column=0, pady=5)
        ttk.Button(self.calendar_frame, text="View weekly earnings", command=self.show_weekly_earnings).grid(row=2, column=1, pady=5)
        ttk.Button(self.calendar_frame, text="View monthly earnings", command=self.show_monthly_earnings).grid(row=3, column=0, columnspan=2, pady=5)

        # Configuration Tab
        self.config_frame = ttk.Frame(self.notebook)
        self.notebook.add(self.config_frame, text="Configuration")

        ttk.Button(self.config_frame, text="Modify work schedule", command=self.modify_work_schedule).pack(pady=10)
        ttk.Button(self.config_frame, text="Modify rates", command=self.modify_rates).pack(pady=10)

    def show_day_details(self):
        selected_date = self.cal.get_date()
        start = datetime.strptime(self.start_time, "%H:%M")
        end = datetime.strptime(self.end_time, "%H:%M")
        normal_hours = (end - start).total_seconds() / 3600
        normal_earnings = normal_hours * self.normal_rate

        details = f"Details for {selected_date}:\n\n"
        details += f"Normal hours: {normal_hours:.2f}\n"
        details += f"Normal earnings: {normal_earnings:.2f}\n"

        cursor = self.conn.cursor()
        cursor.execute("SELECT hours FROM overtime_hours WHERE date=?", (selected_date,))
        overtime_hours_record = cursor.fetchone()

        if overtime_hours_record:
            overtime_hours = overtime_hours_record[0]
            overtime_earnings = overtime_hours * self.overtime_rate
            details += f"Overtime hours: {overtime_hours:.2f}\n"
            details += f"Overtime earnings: {overtime_earnings:.2f}\n"
            total_earnings = normal_earnings + overtime_earnings
        else:
            details += "No overtime hours recorded.\n"
            total_earnings = normal_earnings

        details += f"\nTotal earnings: {total_earnings:.2f}"
        messagebox.showinfo("Day Details", details)

    def show_daily_earnings(self):
        selected_date = self.cal.get_date()
        earnings = self.calculate_earnings(selected_date, selected_date)
        messagebox.showinfo("Daily Earnings", f"Earnings for {selected_date}:\n{earnings}")

    def show_weekly_earnings(self):
        selected_date = datetime.strptime(self.cal.get_date(), "%Y-%m-%d")
        start_of_week = selected_date - timedelta(days=selected_date.weekday())
        end_of_week = start_of_week + timedelta(days=4)  # Considering a 5-day work week
        earnings = self.calculate_earnings(start_of_week.strftime("%Y-%m-%d"), end_of_week.strftime("%Y-%m-%d"))
        messagebox.showinfo("Weekly Earnings", f"Earnings for the week from {start_of_week.strftime('%Y-%m-%d')} to {end_of_week.strftime('%Y-%m-%d')}:\n{earnings}")

    def show_monthly_earnings(self):
        selected_date = datetime.strptime(self.cal.get_date(), "%Y-%m-%d")
        start_of_month = selected_date.replace(day=1)
        end_of_month = (start_of_month + timedelta(days=32)).replace(day=1) - timedelta(days=1)
        earnings = self.calculate_earnings(start_of_month.strftime("%Y-%m-%d"), end_of_month.strftime("%Y-%m-%d"))
        messagebox.showinfo("Monthly Earnings", f"Earnings for the month of {start_of_month.strftime('%B %Y')}:\n{earnings}")

    def calculate_earnings(self, start_date, end_date):
        start = datetime.strptime(self.start_time, "%H:%M")
        end = datetime.strptime(self.end_time, "%H:%M")
        normal_hours_per_day = (end - start).total_seconds() / 3600

        start_date = datetime.strptime(start_date, "%Y-%m-%d")
        end_date = datetime.strptime(end_date, "%Y-%m-%d")
        total_days = (end_date - start_date).days + 1
        work_days = sum(1 for i in range(total_days) if (start_date + timedelta(days=i)).weekday() < 5)

        total_normal_hours = normal_hours_per_day * work_days

        cursor = self.conn.cursor()
        cursor.execute("SELECT SUM(hours) FROM overtime_hours WHERE date BETWEEN ? AND ?",
                       (start_date.strftime("%Y-%m-%d"), end_date.strftime("%Y-%m-%d")))
        total_overtime_hours = cursor.fetchone()[0] or 0

        normal_earnings = total_normal_hours * self.normal_rate
        overtime_earnings = total_overtime_hours * self.overtime_rate
        total_earnings = normal_earnings + overtime_earnings

        return f"Work days: {work_days}\n" \
               f"Normal hours: {total_normal_hours:.2f}\n" \
               f"Overtime hours: {total_overtime_hours:.2f}\n" \
               f"Normal earnings: {normal_earnings:.2f}\n" \
               f"Overtime earnings: {overtime_earnings:.2f}\n" \
               f"Total earnings: {total_earnings:.2f}"

    def add_extra_hours(self):
        selected_date = self.cal.get_date()
        overtime_hours = simpledialog.askfloat("Overtime Hours", f"Enter overtime hours for {selected_date}:")
        if overtime_hours is not None:
            cursor = self.conn.cursor()
            cursor.execute("INSERT OR REPLACE INTO overtime_hours (date, hours) VALUES (?, ?)", (selected_date, overtime_hours))
            self.conn.commit()
            messagebox.showinfo("Success", "Overtime hours recorded successfully.")

    def modify_work_schedule(self):
        start_time = simpledialog.askstring("Modify Schedule", "New start time (HH:MM):")
        end_time = simpledialog.askstring("Modify Schedule", "New end time (HH:MM):")
        if all([start_time, end_time]):
            cursor = self.conn.cursor()
            cursor.execute("UPDATE configuration SET start_time=?, end_time=?",
                           (start_time, end_time))
            self.conn.commit()
            self.start_time, self.end_time = start_time, end_time
            messagebox.showinfo("Success", "Work schedule updated successfully.")

    def modify_rates(self):
        normal_rate = simpledialog.askfloat("Modify Rates", "New normal hourly rate:")
        overtime_rate = simpledialog.askfloat("Modify Rates", "New overtime hourly rate:")
        if normal_rate is not None and overtime_rate is not None:
            cursor = self.conn.cursor()
            cursor.execute("UPDATE rates SET normal_rate=?, overtime_rate=?",
                           (normal_rate, overtime_rate))
            self.conn.commit()
            self.normal_rate, self.overtime_rate = normal_rate, overtime_rate
            messagebox.showinfo("Success", "Rates updated successfully.")

if __name__ == "__main__":
    root = tk.Tk()
    app = WorkScheduleApp(root)
    root.mainloop()
